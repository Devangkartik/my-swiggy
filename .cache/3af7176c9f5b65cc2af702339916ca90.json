{"dependencies":[{"name":"C:\\Users\\91884\\Desktop\\namaste-react\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1697178948839},{"name":"C:\\Users\\91884\\Desktop\\namaste-react\\package.json","includedInParent":true,"mtime":1697178949415},{"name":"C:\\Users\\91884\\Desktop\\namaste-react\\.babelrc","includedInParent":true,"mtime":1697099562875},{"name":"../internals/to-integer-or-infinity","loc":{"line":2,"column":34},"parent":"C:\\Users\\91884\\Desktop\\namaste-react\\node_modules\\core-js\\internals\\to-absolute-index.js","resolved":"C:\\Users\\91884\\Desktop\\namaste-react\\node_modules\\core-js\\internals\\to-integer-or-infinity.js"}],"generated":{"js":"'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","map":{"mappings":[{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\core-js\\internals\\to-absolute-index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}}],"sources":{"node_modules\\core-js\\internals\\to-absolute-index.js":"'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n"},"lineCount":14}},"hash":"43ceeb2344de96e2dfc863959b9eecce","cacheData":{"env":{}},"id":128}